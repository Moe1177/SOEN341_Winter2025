#!/bin/sh

echo "Starting pre-commit hook..."
BASE_DIR=$(pwd)
BACKEND_DIR="$BASE_DIR/soen341-backend"
FRONTEND_DIR="$BASE_DIR/soen341-frontend"

# Store errors in a temporary file to persist across subshells
ERROR_LOG=$(mktemp)

# ================== BACKEND PROCESSING ==================
cd "$BACKEND_DIR" || exit
echo "Processing backend files..."

# Get staged backend files
STAGED_JAVA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.java$" | sed 's|^soen341-backend/||')

if [ -n "$STAGED_JAVA_FILES" ]; then
    # First pass: Run Checkstyle on all files and collect errors
    echo "$STAGED_JAVA_FILES" | while IFS= read -r file; do
        if [ -f "$file" ]; then
            echo "Checking: $file"
            # Append Checkstyle output to error log
            if ! java -jar tools/checkstyle.jar -c tools/checkstyle.xml "$file" >> "$ERROR_LOG" 2>&1; then
                echo "Found formatting issues in: $file"
            fi
        fi
    done

    # If errors were found, attempt to fix them
    if [ -s "$ERROR_LOG" ]; then
        echo "Checkstyle violations detected. Attempting to fix with Spotless..."

        # Verify Spotless is configured
        if grep -q "spotless" "pom.xml"; then
            # Run Spotless and capture its output
            if mvn spotless:apply >> "$ERROR_LOG" 2>&1; then
                echo "Spotless successfully fixed formatting issues."

                # Re-stage fixed files
                echo "$STAGED_JAVA_FILES" | while IFS= read -r file; do
                    if [ -f "$file" ]; then
                        git add "$file"
                        echo "Re-staged: $file"
                    fi
                done
            else
                echo "Spotless failed to fix all issues. Please review the errors:"
                cat "$ERROR_LOG"
                rm "$ERROR_LOG"
                exit 1
            fi
        else
            echo "Spotless plugin not found in pom.xml. Please fix formatting issues manually:"
            cat "$ERROR_LOG"
            rm "$ERROR_LOG"
            exit 1
        fi
    else
        echo "No backend formatting issues found."
    fi
fi

# ================== FRONTEND PROCESSING ==================
cd "$FRONTEND_DIR" || exit
echo "Processing frontend files..."

# Get staged frontend files
STAGED_FRONTEND_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(js|jsx|ts|tsx)$" | sed 's|^frontend/||')

if [ -n "$STAGED_FRONTEND_FILES" ]; then
    # Verify Prettier is installed
    if ! [ -f "package.json" ] || ! grep -q "prettier" "package.json"; then
        echo "Prettier not found in package.json. Skipping frontend formatting."
    else
        echo "Running Prettier on frontend files..."

        # Run Prettier and capture any errors
        if ! npx prettier --write --ignore-unknown "$STAGED_FRONTEND_FILES" >> "$ERROR_LOG" 2>&1; then
            echo "Prettier failed. Please review the errors:"
            cat "$ERROR_LOG"
            rm "$ERROR_LOG"
            exit 1
        fi

        # Re-stage formatted frontend files
        echo "$STAGED_FRONTEND_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
                git add "$file"
                echo "Re-staged: $file"
            fi
        done

        echo "Frontend formatting completed successfully."
    fi
fi

# Cleanup and exit
rm "$ERROR_LOG"
echo "Pre-commit hook completed successfully."
exit 0